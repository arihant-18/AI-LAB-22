def bfs(src,target):
    # Use brute force technique
    arr = [src]
    c = 0
    while arr:
        c += 1
        if arr[0] == target:
            print("Successfully found after ",c , " iterations")
            return True

        arr += possible_moves(arr[0])
        arr.pop(0)
    return False
# Find Possible Moves
def possible_moves(state):
    b = state.index(-1)
    d = []
    if b-3 in range(9):
        d.append('u')
    if b+3 in range(9):
        d.append('d')
    if b not in [0,3,6]:
        d.append('l')
    if b not in [2,5,8]:
        d.append('r')
    # If direction is possible then add state to move
    pos_moves = []
    # for all possible directions find the state if that move is played
    ### Jump to gen function to generate all possible moves in the given directions
    for move in d:
        pos_moves.append(gen(state,move,b))
    return pos_moves
# Generate move for given direction
def gen(state, m, b):
    temp = state.copy()
    # if move is to slide empty spot to the left and so on
    if m == 'u': temp[b], temp[b-3] = temp[b-3], temp[b]
    if m == 'd': temp[b], temp[b+3] = temp[b+3], temp[b]
    if m == 'l': temp[b], temp[b-1] = temp[b-1], temp[b]
    if m == 'r': temp[b], temp[b+1] = temp[b+1], temp[b]
    # return new state with tested move to later check if "src == target"
    return temp
#Test 1
src = [1,2,3,-1,4,5,6,7,8]
target = [1,2,3,4,5,-1,6,7,8]
bfs(src, target)
# Test 2
src = [1,2,3,-1,4,5,6,7,8]
target=[1,2,3,6,4,5,-1,7,8]
bfs(src, target)
